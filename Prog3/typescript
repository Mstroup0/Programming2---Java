Script started on Wed 06 Nov 2019 02:30:16 PM EST
]0;stroup_ma@cobra:~/Prog3[?1034h[stroup_ma@cobra Prog3]$ exitjava mainc main.javacat SalariedEmployee.java[2PHourlyEmployee.java[6PEmployee.java[4Pmain.javaexit[Kcat main.java
//This is the main method for the project.
import java.util.*;
import java.io.*;
import java.text.DecimalFormat;


public class main{
//Varibles
 public static  DecimalFormat dec = new DecimalFormat("#######.##");
//
 public static void main(String[] arg){
    //Variables
    ArrayList<Employee> emp = new ArrayList<Employee> (50);
	inputMenu(emp);
 }
//basic layout of the menu
 public static void MenuLayout(){
  clearScreen();
  Line(40, '-');
  System.out.print("Commands: n - New employee" + "\n\t" + "c - Compute paychecks" +"\n\t" + "r - Raise wages" +"\n\t"+ "p - print Records" +"\n\t"+ "d - download data" +"\n\t"+ "u - upload data" + "\n\t" + "q - Quit \n");
  Line(40, '-');
  System.out.println(" Enter command:" );

 }

//user input Takes the menu outline and adds the element of user inputs.
 public static void inputMenu(ArrayList<Employee> emp) {
    Scanner input = new Scanner(System.in);
	char in = 'A';
   do{
	MenuLayout();
	in = input.next().charAt(0);
	if(in =='n')
		addEmp(emp);

	else if(in == 'c')
		computePay(emp);

	else if(in=='r' )
		raiseWage(emp);

	else if (in =='p')
		print(emp);

	else if(in =='d')
		objectIn(emp);

 	else if(in =='u')
		objectOut(emp);
 	else if((in !='n' || in != 'c' || in != 'r' ||in != 'p' || in != 'd'|| in != 'u' )&& in != 'q'){ //Catches any value that is not n,c,r,p,d,u
 		System.out.println("Comand was not recongized please try again");
 	}
   }  while(in!='q');

 }


// Add new employee
 public static void addEmp(ArrayList<Employee>emp){
	double wage=0;
	String name;
	char type;
	Scanner in = new Scanner(System.in);
	System.out.println("Enter the name of the employee");
	name = in.nextLine();

	System.out.println("hourly(h) or salaried(s)");
	type = in.next().charAt(0);


	   if(type == 'h'){
		System.out.println("enter hourly wage:");
		wage =in.nextDouble();
	   }
	   else if(type =='s' ){
   	   	System.out.println("enter salary");
		wage= in.nextDouble();
 	   }
	else if(type != 'h' || type != 's'){
     		System.out.println("input was not h or s; please try again");
     	}
	setArray(emp, type, wage, name);


 }

//compute the pays
 public static void computePay(ArrayList<Employee> emp){
    Scanner in = new Scanner(System.in);
    int hours;
    double pay =0;
    for(int i =0; i< emp.size(); i++) {
	 System.out.println("Enter the number of hours worked by " +emp.get(i).getName() +" :");
	 hours = in.nextInt();
	 pay =emp.get(i).computePay(hours);
	 if (pay==0)
	 {
		 System.out.println("Pay: $" +  dec.format((emp.get(i).getWage()/52)));
	 }
	 else {
		 System.out.println("Pay: $" + dec.format(pay));
	 }
	 }
 }

//method to raise the wages
 public static void raiseWage(ArrayList<Employee> emp){
    Scanner in = new Scanner(System.in);
    double perce =0;
    double raise=0;
    System.out.println("Enter percentage increase: ");
    perce = in.nextDouble();
    for(int i =0; i< emp.size(); i++) {
		raise = emp.get(i).getWage() + (emp.get(i).getWage() * (perce/100));
        emp.get(i).setWage(raise);

    }
    print(emp);

 }

//Method to print the array
 public static void print(ArrayList<Employee> emp){
    String display;
     for(int i =0; i< emp.size(); i++){
	System.out.println(emp.get(i).toString());
    }

 }


// Sets inputs to specific classes.
 public static void setArray(ArrayList<Employee> emp,  char type, double wage, String name) {
  if  (type == 'h'){
     emp.add(new HourlyEmployee(name, wage));
  }
  else if(type =='s'){
   emp.add(new SalariedEmployee(name, wage));
  }

 }

//Adds to file
 public static void objectOut( ArrayList<Employee> emp){
   String filename = "MyEmployees.dat";
   try{
     FileOutputStream fileout = new FileOutputStream(filename);
     ObjectOutputStream out = new ObjectOutputStream(fileout);
     for(int i =0; i< emp.size(); i++)
         out.writeObject(emp.get(i));
     out.close();
   }
   catch(IOException e){
     System.out.println(e.getMessage());
   }

 }
// brings in data from the file
 public static void objectIn(ArrayList<Employee> emp){
  String FileName = "MyEmployees.dat";
  try{
    FileInputStream FileIn = new FileInputStream(FileName);
    ObjectInputStream in = new ObjectInputStream(FileIn);
    for(int i = 0; i < emp.size(); i++ )
     emp.add((Employee)in.readObject());
    in.close();

  }
  catch(IOException e){
    System.out.println(e.getMessage());
  }
  catch(ClassNotFoundException e){
    System.out.println(e.getMessage());
  }
  for (int i =0; i <emp.size(); i++) {
    System.out.println(emp.get(i));
  }

 }

//CLears the screen
 public static void clearScreen(){
  System.out.println("\u001b[H\u001b[2J");

 }

// creates lines and prints them
 public static void Line(int n, char ch){
  for(int i = 1; i <=n; i++)
    System.out.print(ch);
  System.out.println();
 }




 }
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ cat main.javaexit[Kjava mainc main.javacat SalariedEmployee.java[2PHourlyEmployee.java[6PEmployee.java
import java.util.*;
import java.io.*;
import java.text.DecimalFormat;


public  abstract class Employee implements Serializable{
//Varibles
 public String name;
 public double wage;
 public DecimalFormat dec = new DecimalFormat("#######.##"); // converts numbers into two decimals

//Get methods
//Name
 public String getName(){
   return name;
 }

//wage
 public double getWage(){
   return wage;
 }

//Set methods
//name
 public void setName(String input){
    name = input;
 }

//wage
 public void setWage(double inputw){
    wage = inputw;
 }

//A method that increase the wage (raise)
 public double raise(double percent){
   wage = wage + (wage *(percent/100));
   return wage;

 }

//abstract methods
 public abstract double computePay( int hours);


}
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ cat Employee.java[4Pmain.javaEmployee.java[4Pmain.javaexit[Kjava mainc main.javacat SalariedEmployee.java[2PHourlyEmployee.java
import java.util.*;
import java.io.*;
import java.io.Serializable;
import java.text.DecimalFormat;

public class HourlyEmployee extends Employee implements Serializable{
//Variables
 public DecimalFormat dec = new DecimalFormat("#######.##");

//Constructor
 public HourlyEmployee(String input, double inputW){
   name = input;
   wage = inputW;
 }


//computes either the yearly or weekly pay for the employee.
 public double computePay(int hours){
  int overtime =0;
  double overtimePay =0;
  //if it is over 40 it 
  if(hours > 40){
    overtime = hours - 40;
    overtimePay = (1.5*(wage)) *overtime;
    return (40 *wage) + overtimePay;


  }
  else{
   return hours * wage;
  }
 }

//Converts all of the information into a string
 public String toString(){
   return name + "\t $" + dec.format(wage) + "/hour";
 }



}
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ cat HourlyEmployee.java[6PEmployee.java[4Pmain.javaexit[Kjava mainc main.javacat SalariedEmployee.java
import java.util.*;
import java.text.DecimalFormat;
import java.io.*;
import java.io.Serializable;

public class SalariedEmployee extends Employee implements Serializable{

//Variables

 public double wageS;
 public DecimalFormat dec = new DecimalFormat("#######.##");//converts amounts into to have two decimal places

//Constructor
public SalariedEmployee(String input, double inputW){
   name = input;
   wageS= inputW;
   wage = (wageS/52)/40;
 }

//Getter
//for the wage
 public double getWage(){
  return wageS;
 }
 //for the name
 public String getName() {
	 return name;
 }
//Setter
//for the wage
 public void setWage(double input){
  wageS = input;

 }
 //for the name
public void setName(String nam) {
	name = nam;
}
//computes either the yearly or weekly pay for the employee.
 public double computePay(int hours){
  return ((1/52)*wageS);

 }

//Converts all of the information into a string
 public String toString(){
  return name + "\t $" + dec.format(wageS)+ "/year";

 }


}
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ cat SalariedEmployee.java[2PHourlyEmployee.java[6PEmployee.java[4Pmain.javaexit[Kjava mainc main.java
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ javac main.javacat SalariedEmployee.java[2PHourlyEmployee.java[6PEmployee.java[4Pmain.javaexit[Kjava main
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
n
Enter the name of the employee
sam
hourly(h) or salaried(s)
h
enter hourly wage:
20
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
n
Enter the name of the employee
ham
hourly(h) or salaried(s)
s
enter salary
40000
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
c
Enter the number of hours worked by sam :
r
Exception in thread "main" java.util.InputMismatchException
	at java.util.Scanner.throwFor(Scanner.java:864)
	at java.util.Scanner.next(Scanner.java:1485)
	at java.util.Scanner.nextInt(Scanner.java:2117)
	at java.util.Scanner.nextInt(Scanner.java:2076)
	at main.computePay(main.java:94)
	at main.inputMenu(main.java:37)
	at main.main(main.java:14)
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ java mainc main.java[6P main
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
n
Enter the name of the employee
sam
hourly(h) or salaried(s)
h
enter hourly wage:
40
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
n
Enter the name of the employee
jam
hourly(h) or salaried(s)
s
enter salary
50000
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
c
Enter the number of hours worked by sam :
40
Pay: $1600
Enter the number of hours worked by jam :
90  30
Pay: $961.54
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
r
Enter percentage increase: 
4.5
sam	 $41.8/hour
jam	 $52250/year
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
p
sam	 $41.8/hour
jam	 $52250/year
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
u
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
p d
null
sam	 $41.8/hour
jam	 $52250/year
sam	 $41.8/hour
jam	 $52250/year
[H[2J
----------------------------------------
Commands: n - New employee
	c - Compute paychecks
	r - Raise wages
	p - print Records
	d - download data
	u - upload data
	q - Quit 
----------------------------------------
 Enter command:
q
]0;stroup_ma@cobra:~/Prog3[stroup_ma@cobra Prog3]$ exit
exit

Script done on Wed 06 Nov 2019 02:32:19 PM EST
